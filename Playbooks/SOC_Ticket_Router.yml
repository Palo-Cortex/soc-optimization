id: soc-ticket-router-search-before-create
version: -1
name: SOC - Ticket Router (Search Before Create)
description: >
  Alert-scoped router that ensures exactly one external ticket per incident.
  It derives or accepts an IncidentKey, searches the target ticketing system,
  creates a ticket only if none exists, and stores the ticket reference in incident context.
fromversion: "6.10.0"
tags:
  - soc
  - router
  - tickets
inputs:
  - key: TicketingSystem
    required: false
    description: 'Target system: Jira, ServiceNow, or Auto. If Auto, tries Jira first then ServiceNow.'
    value:
      simple: Auto
  - key: IncidentKey
    required: false
    description: 'Unique key tying alerts in the same incident (defaults to ${incident.id}). Prefer your normalized correlation key if you have one.'
    value:
      complex:
        root: incident
        accessor: id
  - key: JiraProjectKey
    required: false
    description: 'Jira: PROJECT key (e.g., SOC).'
    value: {}
  - key: JiraIssueType
    required: false
    description: 'Jira: issue type (e.g., Task, Incident, Story).'
    value:
      simple: Task
  - key: ServiceNowTable
    required: false
    description: 'ServiceNow: table to use (default incident).'
    value:
      simple: incident
  - key: TicketSummaryTemplate
    required: false
    description: 'Short summary/title. You can include ${IncidentKey} and alert fields.'
    value:
      simple: 'SOC Incident ${IncidentKey} - ${alert.name}'
  - key: TicketDescriptionTemplate
    required: false
    description: 'Long description/body. Include key alert/incident context.'
    value:
      simple: |
        Incident Key: ${IncidentKey}
        Incident Name: ${incident.name}
        Alert Name: ${alert.name}
        Alert ID: ${alert.id}
        Severity: ${alert.severity}
        MITRE: ${alert.mitreattcktactic.[0]} / ${alert.mitreattcktechnique.[0]}
        --
        Summary: ${alert.description}
  - key: InitialCommentTemplate
    required: false
    description: 'Comment added when linking a second+ alert to an existing ticket.'
    value:
      simple: 'New related alert linked to IncidentKey ${IncidentKey}: ${alert.name} (Alert ID ${alert.id}).'
outputs:
  - contextPath: Ticket.ID
    description: The external ticket unique ID (sys_id for SNOW, id for Jira).
    type: string
  - contextPath: Ticket.Key
    description: Jira issue key (e.g., SOC-123) or SNOW number (e.g., INC0012345).
    type: string
  - contextPath: Ticket.URL
    description: Direct URL to the ticket.
    type: string
  - contextPath: Ticket.System
    description: 'jira|servicenow'
    type: string
  - contextPath: Ticket.IncidentKey
    description: The correlation key used for routing.
    type: string
  - contextPath: Ticket.Exists
    description: 'true if router found an existing ticket, false if it created a new one'
    type: boolean
view: {}
tests: []
tasks:
  "0":
    id: "0"
    taskid: 00000000-0000-0000-0000-000000000000
    type: start
    task:
      id: 00000000-0000-0000-0000-000000000000
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ""
    nexttasks:
      '#none#':
        - "10"

  "10":
    id: "10"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111110
      name: Ensure IncidentKey present
      description: Set IncidentKey into playbook & incident context if missing.
      scriptName: Set
      type: regular
      iscommand: false
    scriptarguments:
      key:
        simple: IncidentKey
      value:
        complex:
          root: inputs.IncidentKey
    nexttasks:
      '#none#':
        - "15"

  "15":
    id: "15"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111115
      name: Put IncidentKey under incident context (Ticket.IncidentKey)
      scriptName: Set
      iscommand: false
    scriptarguments:
      key:
        simple: Ticket.IncidentKey
      value:
        complex:
          root: IncidentKey
    nexttasks:
      '#none#':
        - "20"

  "20":
    id: "20"
    type: condition
    task:
      id: 11111111-1111-1111-1111-111111111120
      name: Ticket already stored on incident?
      type: condition
      iscommand: false
      description: If incident context already has a Ticket.ID, weâ€™ll reuse it.
    conditions:
      - label: "yes"
        condition:
          - - operator: isNotEmpty
              left:
                value:
                  simple: Ticket.ID
                iscontext: true
    nexttasks:
      "yes":
        - "25"
      '#default#':
        - "30"

  "25":
    id: "25"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111125
      name: Add comment to existing ticket
      description: Adds a comment noting this additional alert.
      iscommand: false
    nexttasks:
      '#none#':
        - "26"
    scriptarguments: {}

  "26":
    id: "26"
    type: condition
    task:
      id: 11111111-1111-1111-1111-111111111126
      name: Which system for comment?
      type: condition
    conditions:
      - label: jira
        condition:
          - - operator: isEqualString
              left:
                value:
                  simple: Ticket.System
                iscontext: true
              right:
                value:
                  simple: jira
      - label: servicenow
        condition:
          - - operator: isEqualString
              left:
                value:
                  simple: Ticket.System
                iscontext: true
              right:
                value:
                  simple: servicenow
    nexttasks:
      jira:
        - "27"
      servicenow:
        - "28"

  "27":
    id: "27"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111127
      name: Jira - add comment
      iscommand: true
      brand: Jira V3
      script: '|||jira-issue-add-comment'
    scriptarguments:
      issue_id:
        complex:
          root: Ticket.Key
          iscontext: true
      comment:
        complex:
          root: inputs.InitialCommentTemplate
    nexttasks:
      '#none#':
        - "90"

  "28":
    id: "28"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111128
      name: ServiceNow - add comment
      iscommand: true
      brand: ServiceNow v2
      script: '|||servicenow-ticket-add-comment'
    scriptarguments:
      ticket_number:
        complex:
          root: Ticket.Key
          iscontext: true
      comment:
        complex:
          root: inputs.InitialCommentTemplate
    nexttasks:
      '#none#':
        - "90"

  "30":
    id: "30"
    type: condition
    task:
      id: 11111111-1111-1111-1111-111111111130
      name: Decide target system (Jira / ServiceNow)
      type: condition
      description: Uses input TicketingSystem; Auto tries Jira then ServiceNow.
    conditions:
      - label: jira
        condition:
          - - operator: inList
              left:
                value:
                  simple: inputs.TicketingSystem
                iscontext: true
              right:
                value:
                  simple: Jira,Auto
      - label: servicenow
        condition:
          - - operator: inList
              left:
                value:
                  simple: inputs.TicketingSystem
                iscontext: true
              right:
                value:
                  simple: ServiceNow
    nexttasks:
      jira:
        - "40"
      servicenow:
        - "60"

  "40":
    id: "40"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111140
      name: Jira - search for existing ticket by IncidentKey
      iscommand: true
      brand: Jira V3
      script: '|||jira-issue-search'
      description: >
        JQL tries custom field u_incident_key; falls back to text search.
        Adjust field name to match your Jira config.
    scriptarguments:
      jql:
        simple: >
          (project = ${inputs.JiraProjectKey} AND "Incident Key" ~ "${IncidentKey}")
          OR (text ~ "${IncidentKey}")
      max_results:
        simple: "1"
    nexttasks:
      '#none#':
        - "42"

  "42":
    id: "42"
    type: condition
    task:
      id: 11111111-1111-1111-1111-111111111142
      name: Found Jira issue?
      type: condition
    conditions:
      - label: "yes"
        condition:
          - - operator: isNotEmpty
              left:
                value:
                  simple: Jira.Issues.id
                iscontext: true
    nexttasks:
      "yes":
        - "44"
      '#default#':
        - "46"

  "44":
    id: "44"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111144
      name: Set Ticket.* (Jira existing)
      scriptName: SetAndHandleEmpty
      iscommand: false
    scriptarguments:
      key:
        simple: Ticket
      value:
        simple: |
          {
            "ID": "${Jira.Issues.id}",
            "Key": "${Jira.Issues.key}",
            "URL": "${Jira.Issues.self}",
            "System": "jira",
            "Exists": true
          }
    nexttasks:
      '#none#':
        - "90"

  "46":
    id: "46"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111146
      name: Jira - create issue
      iscommand: true
      brand: Jira V3
      script: '|||jira-create-issue'
    scriptarguments:
      project_key:
        simple: ${inputs.JiraProjectKey}
      issue_type_name:
        simple: ${inputs.JiraIssueType}
      summary:
        simple: ${inputs.TicketSummaryTemplate}
      description:
        simple: ${inputs.TicketDescriptionTemplate}
      fields:
        simple: '{"Incident Key":"${IncidentKey}"}'
    nexttasks:
      '#none#':
        - "48"

  "48":
    id: "48"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111148
      name: Set Ticket.* (Jira created)
      scriptName: SetAndHandleEmpty
      iscommand: false
    scriptarguments:
      key:
        simple: Ticket
      value:
        simple: |
          {
            "ID": "${Jira.Issue.id}",
            "Key": "${Jira.Issue.key}",
            "URL": "${Jira.Issue.self}",
            "System": "jira",
            "Exists": false
          }
    nexttasks:
      '#none#':
        - "90"

  "60":
    id: "60"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111160
      name: ServiceNow - query for existing ticket by IncidentKey
      iscommand: true
      brand: ServiceNow v2
      script: '|||servicenow-query-table'
      description: >
        Tries custom u_incident_key then short_description LIKE.
        Adjust query to your field names.
    scriptarguments:
      table_name:
        simple: ${inputs.ServiceNowTable}
      query:
        simple: 'u_incident_key=${IncidentKey}^ORshort_descriptionLIKE${IncidentKey}'
      limit:
        simple: "1"
    nexttasks:
      '#none#':
        - "62"

  "62":
    id: "62"
    type: condition
    task:
      id: 11111111-1111-1111-1111-111111111162
      name: Found ServiceNow ticket?
      type: condition
    conditions:
      - label: "yes"
        condition:
          - - operator: isNotEmpty
              left:
                value:
                  simple: ServiceNow.Record.sys_id
                iscontext: true
    nexttasks:
      "yes":
        - "64"
      '#default#':
        - "66"

  "64":
    id: "64"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111164
      name: Set Ticket.* (SNOW existing)
      scriptName: SetAndHandleEmpty
      iscommand: false
    scriptarguments:
      key:
        simple: Ticket
      value:
        simple: |
          {
            "ID": "${ServiceNow.Record.sys_id}",
            "Key": "${ServiceNow.Record.number}",
            "URL": "${ServiceNow.Record.__query_url}",
            "System": "servicenow",
            "Exists": true
          }
    nexttasks:
      '#none#':
        - "90"

  "66":
    id: "66"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111166
      name: ServiceNow - create ticket
      iscommand: true
      brand: ServiceNow v2
      script: '|||servicenow-create-ticket'
    scriptarguments:
      table_name:
        simple: ${inputs.ServiceNowTable}
      short_description:
        simple: ${inputs.TicketSummaryTemplate}
      description:
        simple: ${inputs.TicketDescriptionTemplate}
      fields:
        simple: '{"u_incident_key":"${IncidentKey}"}'
    nexttasks:
      '#none#':
        - "68"

  "68":
    id: "68"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111168
      name: Set Ticket.* (SNOW created)
      scriptName: SetAndHandleEmpty
      iscommand: false
    scriptarguments:
      key:
        simple: Ticket
      value:
        simple: |
          {
            "ID": "${ServiceNow.Ticket.sys_id}",
            "Key": "${ServiceNow.Ticket.number}",
            "URL": "${ServiceNow.Ticket.sys_domain_path}",
            "System": "servicenow",
            "Exists": false
          }
    nexttasks:
      '#none#':
        - "90"

  "90":
    id: "90"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111190
      name: Persist Ticket.* at INCIDENT scope
      description: Store the selected/created ticket once per incident.
      scriptName: SetIfEmpty
      iscommand: false
    scriptarguments:
      key:
        simple: Ticket.ID
      value:
        complex:
          root: Ticket.ID
      persist:
        simple: "true"
    nexttasks:
      '#none#':
        - "92"

  "92":
    id: "92"
    type: regular
    task:
      id: 11111111-1111-1111-1111-111111111192
      name: Persist remaining fields
      scriptName: Set
      iscommand: false
    scriptarguments:
      key:
        simple: Ticket.Key
      value:
        complex:
          root: Ticket.Key
      append:
        simple: "false"
    nexttasks:
      '#none#':
        - "94"

  "94":
    id: "94"
    type: title
    task:
      id: 11111111-1111-1111-1111-111111111194
      name: Done
      iscommand: false
